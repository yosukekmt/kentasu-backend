// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL")
}

model Admin {
  id              String @id  @unique @default(uuid()) @map("id")
  email           String @unique                       @map("email")
  firebaseUserId  String @unique                       @map("firebase_user_id")
  firebaseUserRaw Json?                                @map("firebase_user_raw")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")
  deletedAt DateTime?                @map("deleted_at")

  @@map("admins")
}

model User {
  id     String @id  @unique @default(uuid()) @map("id")
  email  String @unique                       @map("email")
  wallet String @unique                       @map("wallet")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")
  deletedAt DateTime?                @map("deleted_at")

  results Result[]
  transactions Transaction[]

  @@map("users")
}

model Transaction {
  id              String @id  @unique @default(uuid()) @map("id")
  txHash          String                               @map("tx_hash")
  fromWallet      String?                              @map("from_wallet")
  toWallet        String?                              @map("to_wallet")
  amountWei       Decimal  @db.Decimal(78, 0)          @map("amount_wei")
  gasWei          Decimal? @db.Decimal(78, 0)          @map("gas_wei")
  blockProducedAt DateTime?                            @map("block_produced_at")
  txRaw           Json?                                @map("tx_raw")
  userId          String                               @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")
  deletedAt DateTime?                @map("deleted_at")

  user User? @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Result {
  id         String @id  @unique @default(uuid()) @map("id")
  resultType String?                              @map("result_type")
  userId     String                               @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")
  deletedAt DateTime?                @map("deleted_at")

  user User? @relation(fields: [userId], references: [id])

  @@map("results")
}

